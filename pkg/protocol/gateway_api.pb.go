// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gateway_api.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 心跳
type ClientPingReq struct {
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *ClientPingReq) Reset()         { *m = ClientPingReq{} }
func (m *ClientPingReq) String() string { return proto.CompactTextString(m) }
func (*ClientPingReq) ProtoMessage()    {}
func (*ClientPingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d19061a37068d4c6, []int{0}
}
func (m *ClientPingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientPingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPingReq.Merge(m, src)
}
func (m *ClientPingReq) XXX_Size() int {
	return m.Size()
}
func (m *ClientPingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPingReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPingReq proto.InternalMessageInfo

func (m *ClientPingReq) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type ClientPongAck struct {
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *ClientPongAck) Reset()         { *m = ClientPongAck{} }
func (m *ClientPongAck) String() string { return proto.CompactTextString(m) }
func (*ClientPongAck) ProtoMessage()    {}
func (*ClientPongAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d19061a37068d4c6, []int{1}
}
func (m *ClientPongAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPongAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPongAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientPongAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPongAck.Merge(m, src)
}
func (m *ClientPongAck) XXX_Size() int {
	return m.Size()
}
func (m *ClientPongAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPongAck.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPongAck proto.InternalMessageInfo

func (m *ClientPongAck) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 通知客户端掉线
type ClientDisconnectNtf struct {
	Reason uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ClientDisconnectNtf) Reset()         { *m = ClientDisconnectNtf{} }
func (m *ClientDisconnectNtf) String() string { return proto.CompactTextString(m) }
func (*ClientDisconnectNtf) ProtoMessage()    {}
func (*ClientDisconnectNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_d19061a37068d4c6, []int{2}
}
func (m *ClientDisconnectNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientDisconnectNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientDisconnectNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientDisconnectNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientDisconnectNtf.Merge(m, src)
}
func (m *ClientDisconnectNtf) XXX_Size() int {
	return m.Size()
}
func (m *ClientDisconnectNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientDisconnectNtf.DiscardUnknown(m)
}

var xxx_messageInfo_ClientDisconnectNtf proto.InternalMessageInfo

func (m *ClientDisconnectNtf) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

//握手
type ClientHandshakeReq struct {
	Cipher string `protobuf:"bytes,1,opt,name=cipher,proto3" json:"cipher,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Iv     []byte `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (m *ClientHandshakeReq) Reset()         { *m = ClientHandshakeReq{} }
func (m *ClientHandshakeReq) String() string { return proto.CompactTextString(m) }
func (*ClientHandshakeReq) ProtoMessage()    {}
func (*ClientHandshakeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d19061a37068d4c6, []int{3}
}
func (m *ClientHandshakeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientHandshakeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientHandshakeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientHandshakeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientHandshakeReq.Merge(m, src)
}
func (m *ClientHandshakeReq) XXX_Size() int {
	return m.Size()
}
func (m *ClientHandshakeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientHandshakeReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClientHandshakeReq proto.InternalMessageInfo

func (m *ClientHandshakeReq) GetCipher() string {
	if m != nil {
		return m.Cipher
	}
	return ""
}

func (m *ClientHandshakeReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ClientHandshakeReq) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

type ClientHandshakeAck struct {
	Cipher string `protobuf:"bytes,1,opt,name=cipher,proto3" json:"cipher,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Iv     []byte `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (m *ClientHandshakeAck) Reset()         { *m = ClientHandshakeAck{} }
func (m *ClientHandshakeAck) String() string { return proto.CompactTextString(m) }
func (*ClientHandshakeAck) ProtoMessage()    {}
func (*ClientHandshakeAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d19061a37068d4c6, []int{4}
}
func (m *ClientHandshakeAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientHandshakeAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientHandshakeAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientHandshakeAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientHandshakeAck.Merge(m, src)
}
func (m *ClientHandshakeAck) XXX_Size() int {
	return m.Size()
}
func (m *ClientHandshakeAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientHandshakeAck.DiscardUnknown(m)
}

var xxx_messageInfo_ClientHandshakeAck proto.InternalMessageInfo

func (m *ClientHandshakeAck) GetCipher() string {
	if m != nil {
		return m.Cipher
	}
	return ""
}

func (m *ClientHandshakeAck) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ClientHandshakeAck) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientPingReq)(nil), "protocol.ClientPingReq")
	proto.RegisterType((*ClientPongAck)(nil), "protocol.ClientPongAck")
	proto.RegisterType((*ClientDisconnectNtf)(nil), "protocol.ClientDisconnectNtf")
	proto.RegisterType((*ClientHandshakeReq)(nil), "protocol.ClientHandshakeReq")
	proto.RegisterType((*ClientHandshakeAck)(nil), "protocol.ClientHandshakeAck")
}

func init() { proto.RegisterFile("gateway_api.proto", fileDescriptor_d19061a37068d4c6) }

var fileDescriptor_d19061a37068d4c6 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x4f, 0x2c, 0x49,
	0x2d, 0x4f, 0xac, 0x8c, 0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00,
	0x53, 0xc9, 0xf9, 0x39, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x9e, 0x3e, 0x88, 0x05, 0x91,
	0x57, 0x52, 0xe6, 0xe2, 0x75, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x09, 0xc8, 0xcc, 0x4b, 0x0f, 0x4a,
	0x2d, 0x14, 0x12, 0xe2, 0x62, 0x29, 0xc9, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e,
	0x02, 0xb3, 0x91, 0x14, 0xe5, 0xe7, 0xa5, 0x3b, 0x26, 0x67, 0xc3, 0x15, 0x31, 0x21, 0x29, 0xd2,
	0xe5, 0x12, 0x86, 0x28, 0x72, 0xc9, 0x2c, 0x4e, 0xce, 0xcf, 0xcb, 0x4b, 0x4d, 0x2e, 0xf1, 0x2b,
	0x49, 0x13, 0x12, 0xe3, 0x62, 0x2b, 0x4a, 0x4d, 0x2c, 0xce, 0xcf, 0x03, 0x2b, 0xe6, 0x0d, 0x82,
	0xf2, 0x94, 0xfc, 0xb8, 0x84, 0x20, 0xca, 0x3d, 0x12, 0xf3, 0x52, 0x8a, 0x33, 0x12, 0xb3, 0x53,
	0x41, 0xb6, 0x8b, 0x71, 0xb1, 0x25, 0x67, 0x16, 0x64, 0xa4, 0x16, 0x81, 0xed, 0xe7, 0x0c, 0x82,
	0xf2, 0x84, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0xc1, 0x46, 0xf0, 0x04, 0x81, 0x98, 0x42, 0x7c,
	0x5c, 0x4c, 0x99, 0x65, 0x12, 0xcc, 0x60, 0x01, 0xa6, 0xcc, 0x32, 0x2c, 0xe6, 0x81, 0x1c, 0x4a,
	0xb6, 0x79, 0x4e, 0x32, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c,
	0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x33, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1,
	0x1c, 0x43, 0x12, 0x1b, 0x38, 0xf4, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x8d, 0x03,
	0xda, 0x72, 0x01, 0x00, 0x00,
}

func (m *ClientPingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPingReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientPingReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintGatewayApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientPongAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPongAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientPongAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintGatewayApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ClientDisconnectNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientDisconnectNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientDisconnectNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintGatewayApi(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ClientHandshakeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientHandshakeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientHandshakeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Iv) > 0 {
		i -= len(m.Iv)
		copy(dAtA[i:], m.Iv)
		i = encodeVarintGatewayApi(dAtA, i, uint64(len(m.Iv)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGatewayApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cipher) > 0 {
		i -= len(m.Cipher)
		copy(dAtA[i:], m.Cipher)
		i = encodeVarintGatewayApi(dAtA, i, uint64(len(m.Cipher)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientHandshakeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientHandshakeAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientHandshakeAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Iv) > 0 {
		i -= len(m.Iv)
		copy(dAtA[i:], m.Iv)
		i = encodeVarintGatewayApi(dAtA, i, uint64(len(m.Iv)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGatewayApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cipher) > 0 {
		i -= len(m.Cipher)
		copy(dAtA[i:], m.Cipher)
		i = encodeVarintGatewayApi(dAtA, i, uint64(len(m.Cipher)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGatewayApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovGatewayApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientPingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGatewayApi(uint64(m.Time))
	}
	return n
}

func (m *ClientPongAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGatewayApi(uint64(m.Time))
	}
	return n
}

func (m *ClientDisconnectNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovGatewayApi(uint64(m.Reason))
	}
	return n
}

func (m *ClientHandshakeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cipher)
	if l > 0 {
		n += 1 + l + sovGatewayApi(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGatewayApi(uint64(l))
	}
	l = len(m.Iv)
	if l > 0 {
		n += 1 + l + sovGatewayApi(uint64(l))
	}
	return n
}

func (m *ClientHandshakeAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cipher)
	if l > 0 {
		n += 1 + l + sovGatewayApi(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGatewayApi(uint64(l))
	}
	l = len(m.Iv)
	if l > 0 {
		n += 1 + l + sovGatewayApi(uint64(l))
	}
	return n
}

func sovGatewayApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGatewayApi(x uint64) (n int) {
	return sovGatewayApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientPingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientPongAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPongAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPongAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientDisconnectNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientDisconnectNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientDisconnectNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientHandshakeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientHandshakeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientHandshakeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cipher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cipher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGatewayApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGatewayApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = append(m.Iv[:0], dAtA[iNdEx:postIndex]...)
			if m.Iv == nil {
				m.Iv = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientHandshakeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientHandshakeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientHandshakeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cipher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGatewayApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cipher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGatewayApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGatewayApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = append(m.Iv[:0], dAtA[iNdEx:postIndex]...)
			if m.Iv == nil {
				m.Iv = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGatewayApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGatewayApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGatewayApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGatewayApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGatewayApi = fmt.Errorf("proto: unexpected end of group")
)
