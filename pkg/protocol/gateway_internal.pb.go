// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gateway_internal.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 踢client下线
type KickClientReq struct {
	Sessions []uint32 `protobuf:"varint,1,rep,packed,name=sessions,proto3" json:"sessions,omitempty"`
	Reason   uint32   `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *KickClientReq) Reset()         { *m = KickClientReq{} }
func (m *KickClientReq) String() string { return proto.CompactTextString(m) }
func (*KickClientReq) ProtoMessage()    {}
func (*KickClientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5330266b9844b076, []int{0}
}
func (m *KickClientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickClientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickClientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickClientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickClientReq.Merge(m, src)
}
func (m *KickClientReq) XXX_Size() int {
	return m.Size()
}
func (m *KickClientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KickClientReq.DiscardUnknown(m)
}

var xxx_messageInfo_KickClientReq proto.InternalMessageInfo

func (m *KickClientReq) GetSessions() []uint32 {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *KickClientReq) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type KickClientAck struct {
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *KickClientAck) Reset()         { *m = KickClientAck{} }
func (m *KickClientAck) String() string { return proto.CompactTextString(m) }
func (*KickClientAck) ProtoMessage()    {}
func (*KickClientAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_5330266b9844b076, []int{1}
}
func (m *KickClientAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickClientAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickClientAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickClientAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickClientAck.Merge(m, src)
}
func (m *KickClientAck) XXX_Size() int {
	return m.Size()
}
func (m *KickClientAck) XXX_DiscardUnknown() {
	xxx_messageInfo_KickClientAck.DiscardUnknown(m)
}

var xxx_messageInfo_KickClientAck proto.InternalMessageInfo

func (m *KickClientAck) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// client掉线通知
type ClientLostNtf struct {
	Session uint32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	UserId  int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *ClientLostNtf) Reset()         { *m = ClientLostNtf{} }
func (m *ClientLostNtf) String() string { return proto.CompactTextString(m) }
func (*ClientLostNtf) ProtoMessage()    {}
func (*ClientLostNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_5330266b9844b076, []int{2}
}
func (m *ClientLostNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientLostNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientLostNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientLostNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientLostNtf.Merge(m, src)
}
func (m *ClientLostNtf) XXX_Size() int {
	return m.Size()
}
func (m *ClientLostNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientLostNtf.DiscardUnknown(m)
}

var xxx_messageInfo_ClientLostNtf proto.InternalMessageInfo

func (m *ClientLostNtf) GetSession() uint32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *ClientLostNtf) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 转发client消息
type ForwardClientMsg struct {
	UserId  int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Session uint32 `protobuf:"varint,2,opt,name=session,proto3" json:"session,omitempty"`
	MsgId   uint32 `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	MsgData []byte `protobuf:"bytes,4,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`
}

func (m *ForwardClientMsg) Reset()         { *m = ForwardClientMsg{} }
func (m *ForwardClientMsg) String() string { return proto.CompactTextString(m) }
func (*ForwardClientMsg) ProtoMessage()    {}
func (*ForwardClientMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5330266b9844b076, []int{3}
}
func (m *ForwardClientMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardClientMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardClientMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardClientMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardClientMsg.Merge(m, src)
}
func (m *ForwardClientMsg) XXX_Size() int {
	return m.Size()
}
func (m *ForwardClientMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardClientMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardClientMsg proto.InternalMessageInfo

func (m *ForwardClientMsg) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ForwardClientMsg) GetSession() uint32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *ForwardClientMsg) GetMsgId() uint32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ForwardClientMsg) GetMsgData() []byte {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func init() {
	proto.RegisterType((*KickClientReq)(nil), "protocol.KickClientReq")
	proto.RegisterType((*KickClientAck)(nil), "protocol.KickClientAck")
	proto.RegisterType((*ClientLostNtf)(nil), "protocol.ClientLostNtf")
	proto.RegisterType((*ForwardClientMsg)(nil), "protocol.ForwardClientMsg")
}

func init() { proto.RegisterFile("gateway_internal.proto", fileDescriptor_5330266b9844b076) }

var fileDescriptor_5330266b9844b076 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0x80, 0x9b, 0x55, 0xdb, 0x12, 0x2c, 0x48, 0x98, 0xb3, 0x0e, 0x09, 0xa5, 0x20, 0xf4, 0xa4,
	0x07, 0x9f, 0xc0, 0x4d, 0x84, 0xe1, 0x9f, 0x43, 0x5f, 0x60, 0xc4, 0x36, 0x86, 0xb2, 0x36, 0xd1,
	0xfc, 0x32, 0x8a, 0x6f, 0xe1, 0xd1, 0x47, 0xf2, 0xb8, 0xa3, 0x47, 0x69, 0x5f, 0x44, 0xfa, 0x47,
	0xe9, 0x4e, 0xc9, 0x97, 0x7c, 0xf9, 0x12, 0x82, 0x67, 0x82, 0x19, 0x5e, 0xb1, 0xf7, 0x75, 0x2e,
	0x0d, 0xd7, 0x92, 0x15, 0x97, 0xaf, 0x5a, 0x19, 0x45, 0xbc, 0x6e, 0x48, 0x55, 0x31, 0x9f, 0x0a,
	0x25, 0x54, 0x47, 0x57, 0xed, 0xac, 0xdf, 0x8f, 0x96, 0xd8, 0xbf, 0xcf, 0xd3, 0xcd, 0xb2, 0xc8,
	0xb9, 0x34, 0x09, 0x7f, 0x23, 0x73, 0xec, 0x01, 0x07, 0xc8, 0x95, 0x84, 0x00, 0x85, 0x76, 0xec,
	0x27, 0xff, 0x4c, 0x66, 0xd8, 0xd1, 0x9c, 0x81, 0x92, 0xc1, 0x24, 0x44, 0xb1, 0x9f, 0x0c, 0x14,
	0x5d, 0x8c, 0x23, 0x37, 0xe9, 0x86, 0x4c, 0xf1, 0x61, 0xaa, 0xb6, 0xd2, 0x04, 0xa8, 0xf3, 0x7a,
	0x88, 0x16, 0xd8, 0xef, 0x95, 0x07, 0x05, 0xe6, 0xc9, 0xbc, 0x90, 0x00, 0xbb, 0x43, 0x7b, 0x10,
	0xff, 0x90, 0x9c, 0x62, 0x77, 0x0b, 0x5c, 0xaf, 0xf3, 0xac, 0xbb, 0xca, 0x4e, 0x9c, 0x16, 0x57,
	0x59, 0x54, 0xe1, 0xe3, 0x3b, 0xa5, 0x2b, 0xa6, 0xb3, 0x3e, 0xf5, 0x08, 0x62, 0x2c, 0xa3, 0xb1,
	0x3c, 0xee, 0x4f, 0xf6, 0xfb, 0x27, 0xd8, 0x29, 0x41, 0xb4, 0x27, 0xec, 0xfe, 0x85, 0x25, 0x88,
	0x55, 0x46, 0xce, 0xb0, 0xd7, 0x2e, 0x67, 0xcc, 0xb0, 0xe0, 0x20, 0x44, 0xf1, 0x51, 0xe2, 0x96,
	0x20, 0x6e, 0x99, 0x61, 0x8b, 0xf3, 0xaf, 0x9a, 0xa2, 0x5d, 0x4d, 0xd1, 0x4f, 0x4d, 0xd1, 0x47,
	0x43, 0xad, 0xcf, 0x86, 0x5a, 0xbb, 0x86, 0x5a, 0xdf, 0x0d, 0xb5, 0x9e, 0x9d, 0xee, 0x37, 0xaf,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x95, 0x13, 0x55, 0xb6, 0x87, 0x01, 0x00, 0x00,
}

func (m *KickClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickClientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickClientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintGatewayInternal(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sessions) > 0 {
		dAtA2 := make([]byte, len(m.Sessions)*10)
		var j1 int
		for _, num := range m.Sessions {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGatewayInternal(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KickClientAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickClientAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickClientAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGatewayInternal(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientLostNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientLostNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientLostNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintGatewayInternal(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Session != 0 {
		i = encodeVarintGatewayInternal(dAtA, i, uint64(m.Session))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForwardClientMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardClientMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardClientMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgData) > 0 {
		i -= len(m.MsgData)
		copy(dAtA[i:], m.MsgData)
		i = encodeVarintGatewayInternal(dAtA, i, uint64(len(m.MsgData)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgId != 0 {
		i = encodeVarintGatewayInternal(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x18
	}
	if m.Session != 0 {
		i = encodeVarintGatewayInternal(dAtA, i, uint64(m.Session))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintGatewayInternal(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGatewayInternal(dAtA []byte, offset int, v uint64) int {
	offset -= sovGatewayInternal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KickClientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		l = 0
		for _, e := range m.Sessions {
			l += sovGatewayInternal(uint64(e))
		}
		n += 1 + sovGatewayInternal(uint64(l)) + l
	}
	if m.Reason != 0 {
		n += 1 + sovGatewayInternal(uint64(m.Reason))
	}
	return n
}

func (m *KickClientAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovGatewayInternal(uint64(m.Count))
	}
	return n
}

func (m *ClientLostNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovGatewayInternal(uint64(m.Session))
	}
	if m.UserId != 0 {
		n += 1 + sovGatewayInternal(uint64(m.UserId))
	}
	return n
}

func (m *ForwardClientMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovGatewayInternal(uint64(m.UserId))
	}
	if m.Session != 0 {
		n += 1 + sovGatewayInternal(uint64(m.Session))
	}
	if m.MsgId != 0 {
		n += 1 + sovGatewayInternal(uint64(m.MsgId))
	}
	l = len(m.MsgData)
	if l > 0 {
		n += 1 + l + sovGatewayInternal(uint64(l))
	}
	return n
}

func sovGatewayInternal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGatewayInternal(x uint64) (n int) {
	return sovGatewayInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KickClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGatewayInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sessions = append(m.Sessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGatewayInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGatewayInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGatewayInternal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sessions) == 0 {
					m.Sessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGatewayInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sessions = append(m.Sessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickClientAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickClientAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickClientAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientLostNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientLostNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientLostNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardClientMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardClientMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardClientMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgData = append(m.MsgData[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgData == nil {
				m.MsgData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGatewayInternal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGatewayInternal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGatewayInternal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGatewayInternal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayInternal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGatewayInternal = fmt.Errorf("proto: unexpected end of group")
)
